/* tslint:disable */
/* eslint-disable */
/**
 * fitness-app
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BaseExerciseEntityUser
 */
export interface BaseExerciseEntityUser {
    /**
     * 
     * @type {User}
     * @memberof BaseExerciseEntityUser
     */
    'user': User;
    /**
     * 
     * @type {any}
     * @memberof BaseExerciseEntityUser
     */
    'exercise': any;
    /**
     * 
     * @type {any}
     * @memberof BaseExerciseEntityUser
     */
    'note': any;
}
/**
 * 
 * @export
 * @interface BodyPart
 */
export interface BodyPart {
    /**
     * 
     * @type {any}
     * @memberof BodyPart
     */
    'id': any;
    /**
     * 
     * @type {any}
     * @memberof BodyPart
     */
    'createdAt': any;
    /**
     * 
     * @type {any}
     * @memberof BodyPart
     */
    'updatedAt': any;
    /**
     * 
     * @type {any}
     * @memberof BodyPart
     */
    'bodyPart': any;
    /**
     * 
     * @type {any}
     * @memberof BodyPart
     */
    'exercises'?: any;
}
/**
 * 
 * @export
 * @interface DeleteUser400Response
 */
export interface DeleteUser400Response {
    /**
     * 
     * @type {any}
     * @memberof DeleteUser400Response
     */
    'errors'?: any;
}
/**
 * 
 * @export
 * @interface DeleteUser404Response
 */
export interface DeleteUser404Response {
    /**
     * 
     * @type {any}
     * @memberof DeleteUser404Response
     */
    'message'?: any;
}
/**
 * 
 * @export
 * @interface DiaryEntry
 */
export interface DiaryEntry {
    /**
     * 
     * @type {any}
     * @memberof DiaryEntry
     */
    'id': any;
    /**
     * 
     * @type {any}
     * @memberof DiaryEntry
     */
    'createdAt': any;
    /**
     * 
     * @type {any}
     * @memberof DiaryEntry
     */
    'updatedAt': any;
    /**
     * 
     * @type {any}
     * @memberof DiaryEntry
     */
    'setAmount': any;
    /**
     * 
     * @type {any}
     * @memberof DiaryEntry
     */
    'repetition': any;
}
/**
 * 
 * @export
 * @interface DiaryEntryWeightTrainingExercise
 */
export interface DiaryEntryWeightTrainingExercise {
    /**
     * 
     * @type {any}
     * @memberof DiaryEntryWeightTrainingExercise
     */
    'id'?: any;
}
/**
 * 
 * @export
 * @interface GetBodyPartMulti404Response
 */
export interface GetBodyPartMulti404Response {
    /**
     * 
     * @type {any}
     * @memberof GetBodyPartMulti404Response
     */
    'message'?: any;
}
/**
 * 
 * @export
 * @interface GetBodyPartMultiRequest
 */
export interface GetBodyPartMultiRequest {
    /**
     * 
     * @type {any}
     * @memberof GetBodyPartMultiRequest
     */
    'names'?: any;
}
/**
 * 
 * @export
 * @interface GetUserId400Response
 */
export interface GetUserId400Response {
    /**
     * 
     * @type {any}
     * @memberof GetUserId400Response
     */
    'errors'?: any;
}
/**
 * 
 * @export
 * @interface GetUserId401Response
 */
export interface GetUserId401Response {
    /**
     * 
     * @type {any}
     * @memberof GetUserId401Response
     */
    'errors'?: any;
}
/**
 * 
 * @export
 * @interface GetWeightTrainingExerciseDiaryEntryByDatePlanUserRequest
 */
export interface GetWeightTrainingExerciseDiaryEntryByDatePlanUserRequest {
    /**
     * 
     * @type {any}
     * @memberof GetWeightTrainingExerciseDiaryEntryByDatePlanUserRequest
     */
    'date': any;
}
/**
 * 
 * @export
 * @interface GetWeightTrainingExerciseDiaryEntryGetSummarizedDataLast7Days400Response
 */
export interface GetWeightTrainingExerciseDiaryEntryGetSummarizedDataLast7Days400Response {
    /**
     * 
     * @type {any}
     * @memberof GetWeightTrainingExerciseDiaryEntryGetSummarizedDataLast7Days400Response
     */
    'message'?: any;
}
/**
 * 
 * @export
 * @interface GetWeightTrainingExerciseDiaryEntryGetSummarizedDataLast7Days404Response
 */
export interface GetWeightTrainingExerciseDiaryEntryGetSummarizedDataLast7Days404Response {
    /**
     * 
     * @type {any}
     * @memberof GetWeightTrainingExerciseDiaryEntryGetSummarizedDataLast7Days404Response
     */
    'errors'?: any;
}
/**
 * 
 * @export
 * @interface GetWithoutAuthWeightTrainingExercisesAllDefault400Response
 */
export interface GetWithoutAuthWeightTrainingExercisesAllDefault400Response {
    /**
     * 
     * @type {any}
     * @memberof GetWithoutAuthWeightTrainingExercisesAllDefault400Response
     */
    'message'?: any;
}
/**
 * 
 * @export
 * @interface PostAuthRegister400Response
 */
export interface PostAuthRegister400Response {
    /**
     * 
     * @type {any}
     * @memberof PostAuthRegister400Response
     */
    'errors'?: any;
}
/**
 * 
 * @export
 * @interface PostAuthRegister404Response
 */
export interface PostAuthRegister404Response {
    /**
     * 
     * @type {any}
     * @memberof PostAuthRegister404Response
     */
    'message'?: any;
}
/**
 * 
 * @export
 * @interface PostAuthRegisterRequest
 */
export interface PostAuthRegisterRequest {
    /**
     * 
     * @type {any}
     * @memberof PostAuthRegisterRequest
     */
    'firstName': any;
    /**
     * 
     * @type {any}
     * @memberof PostAuthRegisterRequest
     */
    'lastName': any;
    /**
     * 
     * @type {any}
     * @memberof PostAuthRegisterRequest
     */
    'birthday': any;
    /**
     * 
     * @type {any}
     * @memberof PostAuthRegisterRequest
     */
    'email': any;
    /**
     * 
     * @type {any}
     * @memberof PostAuthRegisterRequest
     */
    'firebaseUid': any;
}
/**
 * 
 * @export
 * @interface PostBodyPartRequest
 */
export interface PostBodyPartRequest {
    /**
     * 
     * @type {any}
     * @memberof PostBodyPartRequest
     */
    'bodyPart': any;
}
/**
 * 
 * @export
 * @interface PostWeightTrainingExerciseDiaryEntry404Response
 */
export interface PostWeightTrainingExerciseDiaryEntry404Response {
    /**
     * 
     * @type {any}
     * @memberof PostWeightTrainingExerciseDiaryEntry404Response
     */
    'messages'?: any;
}
/**
 * 
 * @export
 * @interface PostWeightTrainingExerciseDiaryEntryRequest
 */
export interface PostWeightTrainingExerciseDiaryEntryRequest {
    /**
     * 
     * @type {any}
     * @memberof PostWeightTrainingExerciseDiaryEntryRequest
     */
    'date': any;
    /**
     * 
     * @type {any}
     * @memberof PostWeightTrainingExerciseDiaryEntryRequest
     */
    'weightTrainingExercisePlan': any;
    /**
     * 
     * @type {any}
     * @memberof PostWeightTrainingExerciseDiaryEntryRequest
     */
    'note': any;
}
/**
 * 
 * @export
 * @interface PostWeightTrainingExercisePlanRequest
 */
export interface PostWeightTrainingExercisePlanRequest {
    /**
     * 
     * @type {any}
     * @memberof PostWeightTrainingExercisePlanRequest
     */
    'title': any;
    /**
     * 
     * @type {any}
     * @memberof PostWeightTrainingExercisePlanRequest
     */
    'description': any;
}
/**
 * 
 * @export
 * @interface PostWeightTrainingExerciseRequest
 */
export interface PostWeightTrainingExerciseRequest {
    /**
     * 
     * @type {any}
     * @memberof PostWeightTrainingExerciseRequest
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof PostWeightTrainingExerciseRequest
     */
    'description': any;
    /**
     * 
     * @type {any}
     * @memberof PostWeightTrainingExerciseRequest
     */
    'imageOrGifUrl': any;
    /**
     * 
     * @type {any}
     * @memberof PostWeightTrainingExerciseRequest
     */
    'videoLink': any;
    /**
     * 
     * @type {any}
     * @memberof PostWeightTrainingExerciseRequest
     */
    'muscleGroup': any;
    /**
     * 
     * @type {any}
     * @memberof PostWeightTrainingExerciseRequest
     */
    'bodyPart': any;
    /**
     * 
     * @type {any}
     * @memberof PostWeightTrainingExerciseRequest
     */
    'equipment': any;
}
/**
 * 
 * @export
 * @interface PutBodyPartRequest
 */
export interface PutBodyPartRequest {
    /**
     * 
     * @type {any}
     * @memberof PutBodyPartRequest
     */
    'bodyPart'?: any;
}
/**
 * 
 * @export
 * @interface PutUserUpdateActivePlanId400Response
 */
export interface PutUserUpdateActivePlanId400Response {
    /**
     * 
     * @type {any}
     * @memberof PutUserUpdateActivePlanId400Response
     */
    'errors'?: any;
}
/**
 * 
 * @export
 * @interface PutUserUpdateActivePlanId404Response
 */
export interface PutUserUpdateActivePlanId404Response {
    /**
     * 
     * @type {any}
     * @memberof PutUserUpdateActivePlanId404Response
     */
    'message'?: any;
}
/**
 * 
 * @export
 * @interface PutUserUpdateInformationRequest
 */
export interface PutUserUpdateInformationRequest {
    /**
     * 
     * @type {any}
     * @memberof PutUserUpdateInformationRequest
     */
    'firstName'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutUserUpdateInformationRequest
     */
    'lastName'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutUserUpdateInformationRequest
     */
    'birthday'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutUserUpdateInformationRequest
     */
    'email'?: any;
}
/**
 * 
 * @export
 * @interface PutWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest
 */
export interface PutWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest {
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest
     */
    'repetition'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest
     */
    'setAmount'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest
     */
    'weightTrainingExercise': any;
}
/**
 * 
 * @export
 * @interface PutWeightTrainingExerciseDiaryEntryUpdateDiaryEntry404Response
 */
export interface PutWeightTrainingExerciseDiaryEntryUpdateDiaryEntry404Response {
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExerciseDiaryEntryUpdateDiaryEntry404Response
     */
    'message'?: any;
}
/**
 * 
 * @export
 * @interface PutWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest
 */
export interface PutWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest {
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest
     */
    'date'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest
     */
    'weightTrainingExercisePlan': any;
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest
     */
    'note'?: any;
}
/**
 * 
 * @export
 * @interface PutWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest
 */
export interface PutWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest {
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest
     */
    'repetition'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest
     */
    'setAmount'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest
     */
    'weightTrainingExercise': any;
}
/**
 * 
 * @export
 * @interface PutWeightTrainingExercisePlanAddExercisesRequest
 */
export interface PutWeightTrainingExercisePlanAddExercisesRequest {
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExercisePlanAddExercisesRequest
     */
    'weightTrainingExercise'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExercisePlanAddExercisesRequest
     */
    'setAmount'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExercisePlanAddExercisesRequest
     */
    'repetition'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExercisePlanAddExercisesRequest
     */
    'days'?: any;
}
/**
 * 
 * @export
 * @interface PutWeightTrainingExercisePlanRemoveExercisesRequest
 */
export interface PutWeightTrainingExercisePlanRemoveExercisesRequest {
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExercisePlanRemoveExercisesRequest
     */
    'weightTrainingExercise'?: any;
}
/**
 * 
 * @export
 * @interface PutWeightTrainingExercisePlanUpdateExercisesRequest
 */
export interface PutWeightTrainingExercisePlanUpdateExercisesRequest {
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExercisePlanUpdateExercisesRequest
     */
    'weightTrainingExercise'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExercisePlanUpdateExercisesRequest
     */
    'setAmount'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExercisePlanUpdateExercisesRequest
     */
    'repetition'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExercisePlanUpdateExercisesRequest
     */
    'days'?: any;
}
/**
 * 
 * @export
 * @interface PutWeightTrainingExerciseUpdateBodyPartRequest
 */
export interface PutWeightTrainingExerciseUpdateBodyPartRequest {
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExerciseUpdateBodyPartRequest
     */
    'bodyPart'?: any;
}
/**
 * 
 * @export
 * @interface PutWeightTrainingExerciseUpdateExerciseRequest
 */
export interface PutWeightTrainingExerciseUpdateExerciseRequest {
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExerciseUpdateExerciseRequest
     */
    'name'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExerciseUpdateExerciseRequest
     */
    'description'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExerciseUpdateExerciseRequest
     */
    'imageOrGifUrl'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExerciseUpdateExerciseRequest
     */
    'videoLink'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExerciseUpdateExerciseRequest
     */
    'muscleGroup'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExerciseUpdateExerciseRequest
     */
    'bodyPart'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutWeightTrainingExerciseUpdateExerciseRequest
     */
    'equipment'?: any;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'id': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'createdAt': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'updatedAt': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'firstName': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'lastName': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'birthday': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'email': any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'exercises'?: any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'activePlan'?: any;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'exercisePlans'?: any;
}
/**
 * 
 * @export
 * @interface WeightTrainingExercise
 */
export interface WeightTrainingExercise {
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercise
     */
    'id': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercise
     */
    'createdAt': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercise
     */
    'updatedAt': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercise
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercise
     */
    'description': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercise
     */
    'imageOrGifUrl': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercise
     */
    'videoLink': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercise
     */
    'createdByUser': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercise
     */
    'muscleGroup': any;
    /**
     * 
     * @type {BodyPart}
     * @memberof WeightTrainingExercise
     */
    'bodyPart': BodyPart;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercise
     */
    'equipment': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercise
     */
    'exercisePlans'?: any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercise
     */
    'users'?: any;
}
/**
 * 
 * @export
 * @interface WeightTrainingExerciseDiaryEntry
 */
export interface WeightTrainingExerciseDiaryEntry {
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExerciseDiaryEntry
     */
    'id': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExerciseDiaryEntry
     */
    'updatedAt': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExerciseDiaryEntry
     */
    'createdAt': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExerciseDiaryEntry
     */
    'date': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExerciseDiaryEntry
     */
    'note': any;
    /**
     * 
     * @type {WeightTrainingExercisePlan}
     * @memberof WeightTrainingExerciseDiaryEntry
     */
    'weightTrainingExercisePlan'?: WeightTrainingExercisePlan;
}
/**
 * 
 * @export
 * @interface WeightTrainingExercisePlan
 */
export interface WeightTrainingExercisePlan {
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercisePlan
     */
    'id': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercisePlan
     */
    'createdAt': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercisePlan
     */
    'updatedAt': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercisePlan
     */
    'title': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercisePlan
     */
    'description': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercisePlan
     */
    'createdByUser': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercisePlan
     */
    'user'?: any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercisePlan
     */
    'diaryEntry'?: any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExercisePlan
     */
    'exercises'?: any;
}
/**
 * 
 * @export
 * @interface WeightTrainingExerciseweightTrainingExercisePlan
 */
export interface WeightTrainingExerciseweightTrainingExercisePlan {
    /**
     * 
     * @type {WeightTrainingExercisePlan}
     * @memberof WeightTrainingExerciseweightTrainingExercisePlan
     */
    'exercisePlan': WeightTrainingExercisePlan;
    /**
     * 
     * @type {WeightTrainingExercise}
     * @memberof WeightTrainingExerciseweightTrainingExercisePlan
     */
    'exercise': WeightTrainingExercise;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExerciseweightTrainingExercisePlan
     */
    'setAmount': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExerciseweightTrainingExercisePlan
     */
    'repetition': any;
    /**
     * 
     * @type {any}
     * @memberof WeightTrainingExerciseweightTrainingExercisePlan
     */
    'days': any;
}
/**
 * 
 * @export
 * @interface YogaExercise
 */
export interface YogaExercise {
    /**
     * 
     * @type {any}
     * @memberof YogaExercise
     */
    'id': any;
    /**
     * 
     * @type {any}
     * @memberof YogaExercise
     */
    'createdAt': any;
    /**
     * 
     * @type {any}
     * @memberof YogaExercise
     */
    'updatedAt': any;
    /**
     * 
     * @type {any}
     * @memberof YogaExercise
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof YogaExercise
     */
    'description': any;
    /**
     * 
     * @type {any}
     * @memberof YogaExercise
     */
    'imageOrGifUrl': any;
    /**
     * 
     * @type {any}
     * @memberof YogaExercise
     */
    'videoLink': any;
    /**
     * 
     * @type {any}
     * @memberof YogaExercise
     */
    'createdByUser': any;
    /**
     * 
     * @type {any}
     * @memberof YogaExercise
     */
    'sanskritName': any;
    /**
     * 
     * @type {any}
     * @memberof YogaExercise
     */
    'exercisePlans'?: any;
}
/**
 * 
 * @export
 * @interface YogaExercisePlan
 */
export interface YogaExercisePlan {
    /**
     * 
     * @type {any}
     * @memberof YogaExercisePlan
     */
    'id': any;
    /**
     * 
     * @type {any}
     * @memberof YogaExercisePlan
     */
    'createdAt': any;
    /**
     * 
     * @type {any}
     * @memberof YogaExercisePlan
     */
    'updatedAt': any;
    /**
     * 
     * @type {any}
     * @memberof YogaExercisePlan
     */
    'title': any;
    /**
     * 
     * @type {any}
     * @memberof YogaExercisePlan
     */
    'description': any;
    /**
     * 
     * @type {any}
     * @memberof YogaExercisePlan
     */
    'createdByUser': any;
    /**
     * 
     * @type {any}
     * @memberof YogaExercisePlan
     */
    'user'?: any;
    /**
     * 
     * @type {any}
     * @memberof YogaExercisePlan
     */
    'diaryEntry'?: any;
    /**
     * 
     * @type {any}
     * @memberof YogaExercisePlan
     */
    'exercises'?: any;
}
/**
 * 
 * @export
 * @interface YogaExerciseYogaExercisePlan
 */
export interface YogaExerciseYogaExercisePlan {
    /**
     * 
     * @type {YogaExercisePlan}
     * @memberof YogaExerciseYogaExercisePlan
     */
    'exercisePlan': YogaExercisePlan;
    /**
     * 
     * @type {YogaExercise}
     * @memberof YogaExerciseYogaExercisePlan
     */
    'exercise': YogaExercise;
    /**
     * 
     * @type {any}
     * @memberof YogaExerciseYogaExercisePlan
     */
    'days': any;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBodyPart: async (authorization: any, id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteBodyPart', 'authorization', authorization)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBodyPart', 'id', id)
            const localVarPath = `/bodyPart/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (authorization: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteUser', 'authorization', authorization)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWeightTrainingExercise: async (authorization: any, id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteWeightTrainingExercise', 'authorization', authorization)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWeightTrainingExercise', 'id', id)
            const localVarPath = `/weightTrainingExercise/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWeightTrainingExerciseDiaryEntryId: async (authorization: any, id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteWeightTrainingExerciseDiaryEntryId', 'authorization', authorization)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWeightTrainingExerciseDiaryEntryId', 'id', id)
            const localVarPath = `/weightTrainingExerciseDiaryEntry/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWeightTrainingExercisePlan: async (authorization: any, id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteWeightTrainingExercisePlan', 'authorization', authorization)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWeightTrainingExercisePlan', 'id', id)
            const localVarPath = `/weightTrainingExercisePlan/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBodyPartAll: async (authorization: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBodyPartAll', 'authorization', authorization)
            const localVarPath = `/bodyPart/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {GetBodyPartMultiRequest} [getBodyPartMultiRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBodyPartMulti: async (authorization: any, getBodyPartMultiRequest?: GetBodyPartMultiRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getBodyPartMulti', 'authorization', authorization)
            const localVarPath = `/bodyPart/multi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getBodyPartMultiRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserId: async (authorization: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getUserId', 'authorization', authorization)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTrainingExerciseAll: async (authorization: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWeightTrainingExerciseAll', 'authorization', authorization)
            const localVarPath = `/weightTrainingExercise/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {any} id plan id
         * @param {GetWeightTrainingExerciseDiaryEntryByDatePlanUserRequest} [getWeightTrainingExerciseDiaryEntryByDatePlanUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTrainingExerciseDiaryEntryByDatePlanUser: async (authorization: any, id: any, getWeightTrainingExerciseDiaryEntryByDatePlanUserRequest?: GetWeightTrainingExerciseDiaryEntryByDatePlanUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWeightTrainingExerciseDiaryEntryByDatePlanUser', 'authorization', authorization)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWeightTrainingExerciseDiaryEntryByDatePlanUser', 'id', id)
            const localVarPath = `/weightTrainingExerciseDiaryEntry/byDatePlanUser/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getWeightTrainingExerciseDiaryEntryByDatePlanUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTrainingExerciseDiaryEntryGetSummarizedDataLast7Days: async (authorization: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWeightTrainingExerciseDiaryEntryGetSummarizedDataLast7Days', 'authorization', authorization)
            const localVarPath = `/weightTrainingExerciseDiaryEntry/getSummarizedDataLast7Days`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTrainingExerciseOne: async (authorization: any, id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWeightTrainingExerciseOne', 'authorization', authorization)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWeightTrainingExerciseOne', 'id', id)
            const localVarPath = `/weightTrainingExercise/one/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTrainingExercisePlanAll: async (authorization: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWeightTrainingExercisePlanAll', 'authorization', authorization)
            const localVarPath = `/weightTrainingExercisePlan/allByUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTrainingExercisePlanAllCreatedByUser: async (authorization: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWeightTrainingExercisePlanAllCreatedByUser', 'authorization', authorization)
            const localVarPath = `/weightTrainingExercisePlan/allCreatedByUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTrainingExercisePlanAllDefaultByUser: async (authorization: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWeightTrainingExercisePlanAllDefaultByUser', 'authorization', authorization)
            const localVarPath = `/weightTrainingExercisePlan/allDefaultByUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTrainingExercisePlanOne: async (authorization: any, id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getWeightTrainingExercisePlanOne', 'authorization', authorization)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWeightTrainingExercisePlanOne', 'id', id)
            const localVarPath = `/weightTrainingExercisePlan/one/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWithoutAuthWeightTrainingExercisesAllDefault: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/withoutAuth/weightTrainingExercises/allDefault`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWithoutAuthYogaExercisesAllDefault: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/withoutAuth/yogaExercises/allDefault`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostAuthRegisterRequest} [postAuthRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthRegister: async (postAuthRegisterRequest?: PostAuthRegisterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAuthRegisterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {PostBodyPartRequest} [postBodyPartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBodyPart: async (authorization: any, postBodyPartRequest?: PostBodyPartRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postBodyPart', 'authorization', authorization)
            const localVarPath = `/bodyPart/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postBodyPartRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {PostWeightTrainingExerciseRequest} [postWeightTrainingExerciseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWeightTrainingExercise: async (authorization: any, postWeightTrainingExerciseRequest?: PostWeightTrainingExerciseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postWeightTrainingExercise', 'authorization', authorization)
            const localVarPath = `/weightTrainingExercise/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postWeightTrainingExerciseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {PostWeightTrainingExerciseDiaryEntryRequest} [postWeightTrainingExerciseDiaryEntryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWeightTrainingExerciseDiaryEntry: async (authorization: any, postWeightTrainingExerciseDiaryEntryRequest?: PostWeightTrainingExerciseDiaryEntryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postWeightTrainingExerciseDiaryEntry', 'authorization', authorization)
            const localVarPath = `/weightTrainingExerciseDiaryEntry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postWeightTrainingExerciseDiaryEntryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {PostWeightTrainingExercisePlanRequest} [postWeightTrainingExercisePlanRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWeightTrainingExercisePlan: async (authorization: any, postWeightTrainingExercisePlanRequest?: PostWeightTrainingExercisePlanRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('postWeightTrainingExercisePlan', 'authorization', authorization)
            const localVarPath = `/weightTrainingExercisePlan/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postWeightTrainingExercisePlanRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutBodyPartRequest} [putBodyPartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBodyPart: async (authorization: any, id: any, putBodyPartRequest?: PutBodyPartRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('putBodyPart', 'authorization', authorization)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putBodyPart', 'id', id)
            const localVarPath = `/bodyPart/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putBodyPartRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {any} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserUpdateActivePlanId: async (id: any, authorization?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putUserUpdateActivePlanId', 'id', id)
            const localVarPath = `/user/updateActivePlan/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {PutUserUpdateInformationRequest} [putUserUpdateInformationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserUpdateInformation: async (authorization: any, putUserUpdateInformationRequest?: PutUserUpdateInformationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('putUserUpdateInformation', 'authorization', authorization)
            const localVarPath = `/user/updateInformation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putUserUpdateInformationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest} [putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmount: async (authorization: any, id: any, putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest?: PutWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmount', 'authorization', authorization)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmount', 'id', id)
            const localVarPath = `/weightTrainingExerciseDiaryEntry/addRepetitionAndAmount/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest} [putWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWeightTrainingExerciseDiaryEntryUpdateDiaryEntry: async (authorization: any, id: any, putWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest?: PutWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('putWeightTrainingExerciseDiaryEntryUpdateDiaryEntry', 'authorization', authorization)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putWeightTrainingExerciseDiaryEntryUpdateDiaryEntry', 'id', id)
            const localVarPath = `/weightTrainingExerciseDiaryEntry/updateDiaryEntry/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest} [putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountId: async (authorization: any, id: any, putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest?: PutWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountId', 'authorization', authorization)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountId', 'id', id)
            const localVarPath = `/weightTrainingExerciseDiaryEntry/updateRepetitionAndAmount/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExercisePlanAddExercisesRequest} [putWeightTrainingExercisePlanAddExercisesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWeightTrainingExercisePlanAddExercises: async (authorization: any, id: any, putWeightTrainingExercisePlanAddExercisesRequest?: PutWeightTrainingExercisePlanAddExercisesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('putWeightTrainingExercisePlanAddExercises', 'authorization', authorization)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putWeightTrainingExercisePlanAddExercises', 'id', id)
            const localVarPath = `/weightTrainingExercisePlan/addExercise/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putWeightTrainingExercisePlanAddExercisesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExercisePlanRemoveExercisesRequest} [putWeightTrainingExercisePlanRemoveExercisesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWeightTrainingExercisePlanRemoveExercises: async (authorization: any, id: any, putWeightTrainingExercisePlanRemoveExercisesRequest?: PutWeightTrainingExercisePlanRemoveExercisesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('putWeightTrainingExercisePlanRemoveExercises', 'authorization', authorization)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putWeightTrainingExercisePlanRemoveExercises', 'id', id)
            const localVarPath = `/weightTrainingExercisePlan/removeExercise/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putWeightTrainingExercisePlanRemoveExercisesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExercisePlanUpdateExercisesRequest} [putWeightTrainingExercisePlanUpdateExercisesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWeightTrainingExercisePlanUpdateExercises: async (authorization: any, id: any, putWeightTrainingExercisePlanUpdateExercisesRequest?: PutWeightTrainingExercisePlanUpdateExercisesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('putWeightTrainingExercisePlanUpdateExercises', 'authorization', authorization)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putWeightTrainingExercisePlanUpdateExercises', 'id', id)
            const localVarPath = `/weightTrainingExercisePlan/updateExercise/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putWeightTrainingExercisePlanUpdateExercisesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExerciseUpdateBodyPartRequest} [putWeightTrainingExerciseUpdateBodyPartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWeightTrainingExerciseUpdateBodyPart: async (authorization: any, id: any, putWeightTrainingExerciseUpdateBodyPartRequest?: PutWeightTrainingExerciseUpdateBodyPartRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('putWeightTrainingExerciseUpdateBodyPart', 'authorization', authorization)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putWeightTrainingExerciseUpdateBodyPart', 'id', id)
            const localVarPath = `/weightTrainingExercise/updateBodyPart/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putWeightTrainingExerciseUpdateBodyPartRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExerciseUpdateExerciseRequest} [putWeightTrainingExerciseUpdateExerciseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWeightTrainingExerciseUpdateExercise: async (authorization: any, id: any, putWeightTrainingExerciseUpdateExerciseRequest?: PutWeightTrainingExerciseUpdateExerciseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('putWeightTrainingExerciseUpdateExercise', 'authorization', authorization)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putWeightTrainingExerciseUpdateExercise', 'id', id)
            const localVarPath = `/weightTrainingExercise/updateExercise/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = typeof authorization === 'string' 
                    ? authorization 
                    : JSON.stringify(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putWeightTrainingExerciseUpdateExerciseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBodyPart(authorization: any, id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBodyPart(authorization, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(authorization: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWeightTrainingExercise(authorization: any, id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWeightTrainingExercise(authorization, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWeightTrainingExerciseDiaryEntryId(authorization: any, id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWeightTrainingExerciseDiaryEntryId(authorization, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWeightTrainingExercisePlan(authorization: any, id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWeightTrainingExercisePlan(authorization, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBodyPartAll(authorization: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBodyPartAll(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {GetBodyPartMultiRequest} [getBodyPartMultiRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBodyPartMulti(authorization: any, getBodyPartMultiRequest?: GetBodyPartMultiRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBodyPartMulti(authorization, getBodyPartMultiRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserId(authorization: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserId(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeightTrainingExerciseAll(authorization: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeightTrainingExerciseAll(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {any} id plan id
         * @param {GetWeightTrainingExerciseDiaryEntryByDatePlanUserRequest} [getWeightTrainingExerciseDiaryEntryByDatePlanUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeightTrainingExerciseDiaryEntryByDatePlanUser(authorization: any, id: any, getWeightTrainingExerciseDiaryEntryByDatePlanUserRequest?: GetWeightTrainingExerciseDiaryEntryByDatePlanUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeightTrainingExerciseDiaryEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeightTrainingExerciseDiaryEntryByDatePlanUser(authorization, id, getWeightTrainingExerciseDiaryEntryByDatePlanUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeightTrainingExerciseDiaryEntryGetSummarizedDataLast7Days(authorization: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeightTrainingExerciseDiaryEntryGetSummarizedDataLast7Days(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeightTrainingExerciseOne(authorization: any, id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeightTrainingExercise>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeightTrainingExerciseOne(authorization, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeightTrainingExercisePlanAll(authorization: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeightTrainingExercisePlanAll(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeightTrainingExercisePlanAllCreatedByUser(authorization: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeightTrainingExercisePlanAllCreatedByUser(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeightTrainingExercisePlanAllDefaultByUser(authorization: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeightTrainingExercisePlanAllDefaultByUser(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeightTrainingExercisePlanOne(authorization: any, id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeightTrainingExercisePlan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeightTrainingExercisePlanOne(authorization, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWithoutAuthWeightTrainingExercisesAllDefault(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWithoutAuthWeightTrainingExercisesAllDefault(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWithoutAuthYogaExercisesAllDefault(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWithoutAuthYogaExercisesAllDefault(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PostAuthRegisterRequest} [postAuthRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthRegister(postAuthRegisterRequest?: PostAuthRegisterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthRegister(postAuthRegisterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {PostBodyPartRequest} [postBodyPartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBodyPart(authorization: any, postBodyPartRequest?: PostBodyPartRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BodyPart>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBodyPart(authorization, postBodyPartRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {PostWeightTrainingExerciseRequest} [postWeightTrainingExerciseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWeightTrainingExercise(authorization: any, postWeightTrainingExerciseRequest?: PostWeightTrainingExerciseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeightTrainingExercise>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postWeightTrainingExercise(authorization, postWeightTrainingExerciseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {PostWeightTrainingExerciseDiaryEntryRequest} [postWeightTrainingExerciseDiaryEntryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWeightTrainingExerciseDiaryEntry(authorization: any, postWeightTrainingExerciseDiaryEntryRequest?: PostWeightTrainingExerciseDiaryEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeightTrainingExerciseDiaryEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postWeightTrainingExerciseDiaryEntry(authorization, postWeightTrainingExerciseDiaryEntryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {PostWeightTrainingExercisePlanRequest} [postWeightTrainingExercisePlanRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWeightTrainingExercisePlan(authorization: any, postWeightTrainingExercisePlanRequest?: PostWeightTrainingExercisePlanRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeightTrainingExercisePlan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postWeightTrainingExercisePlan(authorization, postWeightTrainingExercisePlanRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutBodyPartRequest} [putBodyPartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putBodyPart(authorization: any, id: any, putBodyPartRequest?: PutBodyPartRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BodyPart>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putBodyPart(authorization, id, putBodyPartRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {any} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserUpdateActivePlanId(id: any, authorization?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUserUpdateActivePlanId(id, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {PutUserUpdateInformationRequest} [putUserUpdateInformationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserUpdateInformation(authorization: any, putUserUpdateInformationRequest?: PutUserUpdateInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUserUpdateInformation(authorization, putUserUpdateInformationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest} [putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmount(authorization: any, id: any, putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest?: PutWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserId401Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmount(authorization, id, putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest} [putWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWeightTrainingExerciseDiaryEntryUpdateDiaryEntry(authorization: any, id: any, putWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest?: PutWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeightTrainingExerciseDiaryEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putWeightTrainingExerciseDiaryEntryUpdateDiaryEntry(authorization, id, putWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest} [putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountId(authorization: any, id: any, putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest?: PutWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeightTrainingExerciseDiaryEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountId(authorization, id, putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExercisePlanAddExercisesRequest} [putWeightTrainingExercisePlanAddExercisesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWeightTrainingExercisePlanAddExercises(authorization: any, id: any, putWeightTrainingExercisePlanAddExercisesRequest?: PutWeightTrainingExercisePlanAddExercisesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeightTrainingExercisePlan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putWeightTrainingExercisePlanAddExercises(authorization, id, putWeightTrainingExercisePlanAddExercisesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExercisePlanRemoveExercisesRequest} [putWeightTrainingExercisePlanRemoveExercisesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWeightTrainingExercisePlanRemoveExercises(authorization: any, id: any, putWeightTrainingExercisePlanRemoveExercisesRequest?: PutWeightTrainingExercisePlanRemoveExercisesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeightTrainingExercisePlan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putWeightTrainingExercisePlanRemoveExercises(authorization, id, putWeightTrainingExercisePlanRemoveExercisesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExercisePlanUpdateExercisesRequest} [putWeightTrainingExercisePlanUpdateExercisesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWeightTrainingExercisePlanUpdateExercises(authorization: any, id: any, putWeightTrainingExercisePlanUpdateExercisesRequest?: PutWeightTrainingExercisePlanUpdateExercisesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeightTrainingExercisePlan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putWeightTrainingExercisePlanUpdateExercises(authorization, id, putWeightTrainingExercisePlanUpdateExercisesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExerciseUpdateBodyPartRequest} [putWeightTrainingExerciseUpdateBodyPartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWeightTrainingExerciseUpdateBodyPart(authorization: any, id: any, putWeightTrainingExerciseUpdateBodyPartRequest?: PutWeightTrainingExerciseUpdateBodyPartRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeightTrainingExercise>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putWeightTrainingExerciseUpdateBodyPart(authorization, id, putWeightTrainingExerciseUpdateBodyPartRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExerciseUpdateExerciseRequest} [putWeightTrainingExerciseUpdateExerciseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWeightTrainingExerciseUpdateExercise(authorization: any, id: any, putWeightTrainingExerciseUpdateExerciseRequest?: PutWeightTrainingExerciseUpdateExerciseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeightTrainingExercise>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putWeightTrainingExerciseUpdateExercise(authorization, id, putWeightTrainingExerciseUpdateExerciseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBodyPart(authorization: any, id: any, options?: any): AxiosPromise<any> {
            return localVarFp.deleteBodyPart(authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(authorization: any, options?: any): AxiosPromise<any> {
            return localVarFp.deleteUser(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWeightTrainingExercise(authorization: any, id: any, options?: any): AxiosPromise<any> {
            return localVarFp.deleteWeightTrainingExercise(authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWeightTrainingExerciseDiaryEntryId(authorization: any, id: any, options?: any): AxiosPromise<any> {
            return localVarFp.deleteWeightTrainingExerciseDiaryEntryId(authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWeightTrainingExercisePlan(authorization: any, id: any, options?: any): AxiosPromise<any> {
            return localVarFp.deleteWeightTrainingExercisePlan(authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBodyPartAll(authorization: any, options?: any): AxiosPromise<any> {
            return localVarFp.getBodyPartAll(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {GetBodyPartMultiRequest} [getBodyPartMultiRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBodyPartMulti(authorization: any, getBodyPartMultiRequest?: GetBodyPartMultiRequest, options?: any): AxiosPromise<any> {
            return localVarFp.getBodyPartMulti(authorization, getBodyPartMultiRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserId(authorization: any, options?: any): AxiosPromise<User> {
            return localVarFp.getUserId(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTrainingExerciseAll(authorization: any, options?: any): AxiosPromise<any> {
            return localVarFp.getWeightTrainingExerciseAll(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {any} id plan id
         * @param {GetWeightTrainingExerciseDiaryEntryByDatePlanUserRequest} [getWeightTrainingExerciseDiaryEntryByDatePlanUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTrainingExerciseDiaryEntryByDatePlanUser(authorization: any, id: any, getWeightTrainingExerciseDiaryEntryByDatePlanUserRequest?: GetWeightTrainingExerciseDiaryEntryByDatePlanUserRequest, options?: any): AxiosPromise<WeightTrainingExerciseDiaryEntry> {
            return localVarFp.getWeightTrainingExerciseDiaryEntryByDatePlanUser(authorization, id, getWeightTrainingExerciseDiaryEntryByDatePlanUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTrainingExerciseDiaryEntryGetSummarizedDataLast7Days(authorization: any, options?: any): AxiosPromise<any> {
            return localVarFp.getWeightTrainingExerciseDiaryEntryGetSummarizedDataLast7Days(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTrainingExerciseOne(authorization: any, id: any, options?: any): AxiosPromise<WeightTrainingExercise> {
            return localVarFp.getWeightTrainingExerciseOne(authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTrainingExercisePlanAll(authorization: any, options?: any): AxiosPromise<any> {
            return localVarFp.getWeightTrainingExercisePlanAll(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTrainingExercisePlanAllCreatedByUser(authorization: any, options?: any): AxiosPromise<any> {
            return localVarFp.getWeightTrainingExercisePlanAllCreatedByUser(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTrainingExercisePlanAllDefaultByUser(authorization: any, options?: any): AxiosPromise<any> {
            return localVarFp.getWeightTrainingExercisePlanAllDefaultByUser(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} authorization 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTrainingExercisePlanOne(authorization: any, id: any, options?: any): AxiosPromise<WeightTrainingExercisePlan> {
            return localVarFp.getWeightTrainingExercisePlanOne(authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWithoutAuthWeightTrainingExercisesAllDefault(options?: any): AxiosPromise<any> {
            return localVarFp.getWithoutAuthWeightTrainingExercisesAllDefault(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWithoutAuthYogaExercisesAllDefault(options?: any): AxiosPromise<any> {
            return localVarFp.getWithoutAuthYogaExercisesAllDefault(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PostAuthRegisterRequest} [postAuthRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthRegister(postAuthRegisterRequest?: PostAuthRegisterRequest, options?: any): AxiosPromise<User> {
            return localVarFp.postAuthRegister(postAuthRegisterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {PostBodyPartRequest} [postBodyPartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBodyPart(authorization: any, postBodyPartRequest?: PostBodyPartRequest, options?: any): AxiosPromise<BodyPart> {
            return localVarFp.postBodyPart(authorization, postBodyPartRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {PostWeightTrainingExerciseRequest} [postWeightTrainingExerciseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWeightTrainingExercise(authorization: any, postWeightTrainingExerciseRequest?: PostWeightTrainingExerciseRequest, options?: any): AxiosPromise<WeightTrainingExercise> {
            return localVarFp.postWeightTrainingExercise(authorization, postWeightTrainingExerciseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {PostWeightTrainingExerciseDiaryEntryRequest} [postWeightTrainingExerciseDiaryEntryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWeightTrainingExerciseDiaryEntry(authorization: any, postWeightTrainingExerciseDiaryEntryRequest?: PostWeightTrainingExerciseDiaryEntryRequest, options?: any): AxiosPromise<WeightTrainingExerciseDiaryEntry> {
            return localVarFp.postWeightTrainingExerciseDiaryEntry(authorization, postWeightTrainingExerciseDiaryEntryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {PostWeightTrainingExercisePlanRequest} [postWeightTrainingExercisePlanRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWeightTrainingExercisePlan(authorization: any, postWeightTrainingExercisePlanRequest?: PostWeightTrainingExercisePlanRequest, options?: any): AxiosPromise<WeightTrainingExercisePlan> {
            return localVarFp.postWeightTrainingExercisePlan(authorization, postWeightTrainingExercisePlanRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutBodyPartRequest} [putBodyPartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBodyPart(authorization: any, id: any, putBodyPartRequest?: PutBodyPartRequest, options?: any): AxiosPromise<BodyPart> {
            return localVarFp.putBodyPart(authorization, id, putBodyPartRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {any} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserUpdateActivePlanId(id: any, authorization?: any, options?: any): AxiosPromise<User> {
            return localVarFp.putUserUpdateActivePlanId(id, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {PutUserUpdateInformationRequest} [putUserUpdateInformationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserUpdateInformation(authorization: any, putUserUpdateInformationRequest?: PutUserUpdateInformationRequest, options?: any): AxiosPromise<User> {
            return localVarFp.putUserUpdateInformation(authorization, putUserUpdateInformationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest} [putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmount(authorization: any, id: any, putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest?: PutWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest, options?: any): AxiosPromise<GetUserId401Response> {
            return localVarFp.putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmount(authorization, id, putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest} [putWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWeightTrainingExerciseDiaryEntryUpdateDiaryEntry(authorization: any, id: any, putWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest?: PutWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest, options?: any): AxiosPromise<WeightTrainingExerciseDiaryEntry> {
            return localVarFp.putWeightTrainingExerciseDiaryEntryUpdateDiaryEntry(authorization, id, putWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest} [putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountId(authorization: any, id: any, putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest?: PutWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest, options?: any): AxiosPromise<WeightTrainingExerciseDiaryEntry> {
            return localVarFp.putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountId(authorization, id, putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExercisePlanAddExercisesRequest} [putWeightTrainingExercisePlanAddExercisesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWeightTrainingExercisePlanAddExercises(authorization: any, id: any, putWeightTrainingExercisePlanAddExercisesRequest?: PutWeightTrainingExercisePlanAddExercisesRequest, options?: any): AxiosPromise<WeightTrainingExercisePlan> {
            return localVarFp.putWeightTrainingExercisePlanAddExercises(authorization, id, putWeightTrainingExercisePlanAddExercisesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExercisePlanRemoveExercisesRequest} [putWeightTrainingExercisePlanRemoveExercisesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWeightTrainingExercisePlanRemoveExercises(authorization: any, id: any, putWeightTrainingExercisePlanRemoveExercisesRequest?: PutWeightTrainingExercisePlanRemoveExercisesRequest, options?: any): AxiosPromise<WeightTrainingExercisePlan> {
            return localVarFp.putWeightTrainingExercisePlanRemoveExercises(authorization, id, putWeightTrainingExercisePlanRemoveExercisesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExercisePlanUpdateExercisesRequest} [putWeightTrainingExercisePlanUpdateExercisesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWeightTrainingExercisePlanUpdateExercises(authorization: any, id: any, putWeightTrainingExercisePlanUpdateExercisesRequest?: PutWeightTrainingExercisePlanUpdateExercisesRequest, options?: any): AxiosPromise<WeightTrainingExercisePlan> {
            return localVarFp.putWeightTrainingExercisePlanUpdateExercises(authorization, id, putWeightTrainingExercisePlanUpdateExercisesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExerciseUpdateBodyPartRequest} [putWeightTrainingExerciseUpdateBodyPartRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWeightTrainingExerciseUpdateBodyPart(authorization: any, id: any, putWeightTrainingExerciseUpdateBodyPartRequest?: PutWeightTrainingExerciseUpdateBodyPartRequest, options?: any): AxiosPromise<WeightTrainingExercise> {
            return localVarFp.putWeightTrainingExerciseUpdateBodyPart(authorization, id, putWeightTrainingExerciseUpdateBodyPartRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} authorization 
         * @param {any} id 
         * @param {PutWeightTrainingExerciseUpdateExerciseRequest} [putWeightTrainingExerciseUpdateExerciseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWeightTrainingExerciseUpdateExercise(authorization: any, id: any, putWeightTrainingExerciseUpdateExerciseRequest?: PutWeightTrainingExerciseUpdateExerciseRequest, options?: any): AxiosPromise<WeightTrainingExercise> {
            return localVarFp.putWeightTrainingExerciseUpdateExercise(authorization, id, putWeightTrainingExerciseUpdateExerciseRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {any} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteBodyPart(authorization: any, id: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteBodyPart(authorization, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUser(authorization: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUser(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {any} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWeightTrainingExercise(authorization: any, id: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteWeightTrainingExercise(authorization, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {any} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWeightTrainingExerciseDiaryEntryId(authorization: any, id: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteWeightTrainingExerciseDiaryEntryId(authorization, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {any} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWeightTrainingExercisePlan(authorization: any, id: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteWeightTrainingExercisePlan(authorization, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {any} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBodyPartAll(authorization: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBodyPartAll(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {any} authorization 
     * @param {GetBodyPartMultiRequest} [getBodyPartMultiRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBodyPartMulti(authorization: any, getBodyPartMultiRequest?: GetBodyPartMultiRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBodyPartMulti(authorization, getBodyPartMultiRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserId(authorization: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserId(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {any} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWeightTrainingExerciseAll(authorization: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWeightTrainingExerciseAll(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {any} authorization 
     * @param {any} id plan id
     * @param {GetWeightTrainingExerciseDiaryEntryByDatePlanUserRequest} [getWeightTrainingExerciseDiaryEntryByDatePlanUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWeightTrainingExerciseDiaryEntryByDatePlanUser(authorization: any, id: any, getWeightTrainingExerciseDiaryEntryByDatePlanUserRequest?: GetWeightTrainingExerciseDiaryEntryByDatePlanUserRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWeightTrainingExerciseDiaryEntryByDatePlanUser(authorization, id, getWeightTrainingExerciseDiaryEntryByDatePlanUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {any} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWeightTrainingExerciseDiaryEntryGetSummarizedDataLast7Days(authorization: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWeightTrainingExerciseDiaryEntryGetSummarizedDataLast7Days(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {any} authorization 
     * @param {any} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWeightTrainingExerciseOne(authorization: any, id: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWeightTrainingExerciseOne(authorization, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {any} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWeightTrainingExercisePlanAll(authorization: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWeightTrainingExercisePlanAll(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {any} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWeightTrainingExercisePlanAllCreatedByUser(authorization: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWeightTrainingExercisePlanAllCreatedByUser(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {any} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWeightTrainingExercisePlanAllDefaultByUser(authorization: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWeightTrainingExercisePlanAllDefaultByUser(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {any} authorization 
     * @param {any} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWeightTrainingExercisePlanOne(authorization: any, id: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWeightTrainingExercisePlanOne(authorization, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWithoutAuthWeightTrainingExercisesAllDefault(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWithoutAuthWeightTrainingExercisesAllDefault(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWithoutAuthYogaExercisesAllDefault(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWithoutAuthYogaExercisesAllDefault(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PostAuthRegisterRequest} [postAuthRegisterRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postAuthRegister(postAuthRegisterRequest?: PostAuthRegisterRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postAuthRegister(postAuthRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {PostBodyPartRequest} [postBodyPartRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postBodyPart(authorization: any, postBodyPartRequest?: PostBodyPartRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postBodyPart(authorization, postBodyPartRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {PostWeightTrainingExerciseRequest} [postWeightTrainingExerciseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWeightTrainingExercise(authorization: any, postWeightTrainingExerciseRequest?: PostWeightTrainingExerciseRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postWeightTrainingExercise(authorization, postWeightTrainingExerciseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {PostWeightTrainingExerciseDiaryEntryRequest} [postWeightTrainingExerciseDiaryEntryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWeightTrainingExerciseDiaryEntry(authorization: any, postWeightTrainingExerciseDiaryEntryRequest?: PostWeightTrainingExerciseDiaryEntryRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postWeightTrainingExerciseDiaryEntry(authorization, postWeightTrainingExerciseDiaryEntryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {PostWeightTrainingExercisePlanRequest} [postWeightTrainingExercisePlanRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWeightTrainingExercisePlan(authorization: any, postWeightTrainingExercisePlanRequest?: PostWeightTrainingExercisePlanRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postWeightTrainingExercisePlan(authorization, postWeightTrainingExercisePlanRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {any} id 
     * @param {PutBodyPartRequest} [putBodyPartRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putBodyPart(authorization: any, id: any, putBodyPartRequest?: PutBodyPartRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putBodyPart(authorization, id, putBodyPartRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} id 
     * @param {any} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putUserUpdateActivePlanId(id: any, authorization?: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putUserUpdateActivePlanId(id, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {PutUserUpdateInformationRequest} [putUserUpdateInformationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putUserUpdateInformation(authorization: any, putUserUpdateInformationRequest?: PutUserUpdateInformationRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putUserUpdateInformation(authorization, putUserUpdateInformationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {any} id 
     * @param {PutWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest} [putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmount(authorization: any, id: any, putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest?: PutWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmount(authorization, id, putWeightTrainingExerciseDiaryEntryAddRepetitionAndAmountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {any} id 
     * @param {PutWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest} [putWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWeightTrainingExerciseDiaryEntryUpdateDiaryEntry(authorization: any, id: any, putWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest?: PutWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putWeightTrainingExerciseDiaryEntryUpdateDiaryEntry(authorization, id, putWeightTrainingExerciseDiaryEntryUpdateDiaryEntryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {any} id 
     * @param {PutWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest} [putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountId(authorization: any, id: any, putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest?: PutWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountId(authorization, id, putWeightTrainingExerciseDiaryEntryUpdateRepetitionAndAmountIdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {any} id 
     * @param {PutWeightTrainingExercisePlanAddExercisesRequest} [putWeightTrainingExercisePlanAddExercisesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWeightTrainingExercisePlanAddExercises(authorization: any, id: any, putWeightTrainingExercisePlanAddExercisesRequest?: PutWeightTrainingExercisePlanAddExercisesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putWeightTrainingExercisePlanAddExercises(authorization, id, putWeightTrainingExercisePlanAddExercisesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {any} id 
     * @param {PutWeightTrainingExercisePlanRemoveExercisesRequest} [putWeightTrainingExercisePlanRemoveExercisesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWeightTrainingExercisePlanRemoveExercises(authorization: any, id: any, putWeightTrainingExercisePlanRemoveExercisesRequest?: PutWeightTrainingExercisePlanRemoveExercisesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putWeightTrainingExercisePlanRemoveExercises(authorization, id, putWeightTrainingExercisePlanRemoveExercisesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {any} id 
     * @param {PutWeightTrainingExercisePlanUpdateExercisesRequest} [putWeightTrainingExercisePlanUpdateExercisesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWeightTrainingExercisePlanUpdateExercises(authorization: any, id: any, putWeightTrainingExercisePlanUpdateExercisesRequest?: PutWeightTrainingExercisePlanUpdateExercisesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putWeightTrainingExercisePlanUpdateExercises(authorization, id, putWeightTrainingExercisePlanUpdateExercisesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {any} id 
     * @param {PutWeightTrainingExerciseUpdateBodyPartRequest} [putWeightTrainingExerciseUpdateBodyPartRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWeightTrainingExerciseUpdateBodyPart(authorization: any, id: any, putWeightTrainingExerciseUpdateBodyPartRequest?: PutWeightTrainingExerciseUpdateBodyPartRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putWeightTrainingExerciseUpdateBodyPart(authorization, id, putWeightTrainingExerciseUpdateBodyPartRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} authorization 
     * @param {any} id 
     * @param {PutWeightTrainingExerciseUpdateExerciseRequest} [putWeightTrainingExerciseUpdateExerciseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWeightTrainingExerciseUpdateExercise(authorization: any, id: any, putWeightTrainingExerciseUpdateExerciseRequest?: PutWeightTrainingExerciseUpdateExerciseRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putWeightTrainingExerciseUpdateExercise(authorization, id, putWeightTrainingExerciseUpdateExerciseRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


